// Copyright (c) 2018-2022 The MobileCoin Foundation

// API for decentralized quoting service (DEQS)

syntax = "proto3";
import "google/protobuf/timestamp.proto";

package deqs;
option java_package = "com.mobilecoin.api";
option go_package = "mobilecoin/api";

import "external.proto";

service DeqsClientAPI {
    /// This is called to submit a new quote
    rpc SubmitQuote(SubmitQuoteRequest) returns (SubmitQuoteResponse) {}

    /// This is called to get the existing quotes
    rpc GetQuotes(GetQuotesRequest) returns (GetQuotesResponse) {}

    rpc LiveUpdates(SubmitQuoteRequest) returns (stream SubmitQuoteResponse);
}

message SubmitQuoteRequest {
    /// One or more quotes to submit
    repeated external.SignedContingentInput quotes = 1;
}

message SubmitQuoteResponse {
    /// The status of each submission
    repeated QuoteStatusCode status_codes = 1;
}

/// The status that a quote can have upon submission
///
/// (Should there be a status code here for each way a SignedContingentInput can be invalid?)
enum QuoteStatusCode {
    VALID = 0;
    INVALID = 1;
}

message GetQuotesRequest {}

message GetQuotesResponse {
    repeated external.SignedContingentInput quotes = 1;
}

/// Order Unique Identifier.
message OrderId {
    bytes data = 1;
}

/// Single trading pair.
message Pair {
    /// The token id being offered "for sale".
    uint64 base_token_id = 1;

    /// The token id that needs to be paid to satisfy the offering.
    /// (The SCI is "priced" with this token id)
    uint64 counter_token_id = 2;
}

/// A single order in the order book.
/// See deqs_order_book::Order
message Order {
    external.SignedContingentInput sci = 1;
    OrderId id = 2;
    Pair pair = 3;
    uint64 base_range_min = 4;
    uint64 base_range_max = 5;
    uint64 max_counter_tokens = 6;
    google.protobuf.Timestamp timestamp = 7;
}